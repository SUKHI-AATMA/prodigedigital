////////////////////////////////////// MEDIA QUERRY /////////////////////////////////////////

$breakpoint-small: 600px;
$breakpoint-med-small: 960px;
$breakpoint-med: 1175px;

@mixin screen($size, $type: max, $pixels: $breakpoint-small) {
    @if $size == "small" {
        @media screen and ($type + -width: $breakpoint-small) {
            @content;
        }
    } @else if $size == "med-small" {
        @media screen and ($type + -width: $breakpoint-med-small) {
            @content;
        }
    } @else if $size == "med" {
        @media screen and ($type + -width: $breakpoint-med) {
            @content;
        }
    } @else if $size == "large" {
        @media screen and ($type + -width: $breakpoint-med) {
            @content;
        }
    } @else if $size == "custom" {
        @media screen and ($type + -width: $pixels + px) {
            @content;
        }
    } @else {
        @content;
    }
}

// .foo {
//     @include screen(large) {
//         width: 20%;
//     }
//     @include screen(med) {
//         width: 40%;
//     }
//     @include screen(med-small) {
//         width: 60%;
//     }
//     @include screen(small) {
//         width: 80%;
//     }
//     @include screen(custom, max, 400) {
//         width: 100%;
//     }
// }

////////////////////////////////////// MEDIA QUERRY /////////////////////////////////////////

////////////////////////////////////// Font Size /////////////////////////////////////////
@function calculateRem($size) {
    $remSize: $size / 16px;
    @return $remSize * 1rem;
}

@mixin font-size($size) {
    font-size: $size;
    font-size: calculateRem($size);
}
// p {
//     @include font-size(14px);
// }
////////////////////////////////////// Font Size /////////////////////////////////////////

////////////////////////////////////// Retina image /////////////////////////////////////////
@mixin image-2x($image, $width, $height) {
    @media (min--moz-device-pixel-ratio: 1.3),
        (-o-min-device-pixel-ratio: 2.6/2),
        (-webkit-min-device-pixel-ratio: 1.3),
        (min-device-pixel-ratio: 1.3),
        (min-resolution: 1.3dppx) {
        background-image: url($image);
        background-size: $width $height;
    }
}

// div.logo {
//     background: url("logo.png") no-repeat;
//     @include image-2x("logo2x.png", 100px, 25px);
// }

////////////////////////////////////// Retina image /////////////////////////////////////////

////////////////////////////////////// Spacing /////////////////////////////////////////
@mixin generate($prefix, $property) {
    // List of sizes to generate for each
    $sizes: [0, .25, .5, 1, 1.5, 3];
    // Spacing to multiply the sizes by
    $spacing: 1rem;
    
    // Loop through all of the sizes(we use @for rather than @each, as we want access to the index)
    @for $i from 1 through length($sizes) {
        // Get the size for the current index
        $size: nth($sizes, $i);
        
        // Create the rule
        .#{$prefix}-#{$i - 1} {
            #{$property}: $spacing * $size;
        }
    }
}
////////////////////////////////////// Spacing /////////////////////////////////////////